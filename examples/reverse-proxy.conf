# vim:ft=nginx
# Reverse proxy example. This upstream defines the group of backend hosts that
# we are going to reverse-proxy the requests to. ip hash directive ensures
# the same client wil end up on the same backend server, which is important in some cases,
# such as when sessions are saved on a local file on the backend server
upstream exbackend {
	ip hash;
	server 127.0.0.1:1248;
	server 127.0.0.1:1249;
	server 127.0.0.1:1250;
	keepalive 16;
}

# This server context implements a reverse proxy for http://example.reverse.proxy/.
# Requests to this address will either get proxied to one of the backends defined 
# above. Static content matching the first location context defined herein will not
# be reverse proxied but handled by nginx directly.
# The server context implements the reverse proxy for http://example.reverse.proxy/.
# Requests to this address will get proxied to one of the backends in exbackend unless
# some the 
server {
	listen 80;
	server_name example.reverse.proxy;
	root /home/exrevpxy/www;

	# When the URI matches the regular expression defined below
	# it will try to fetch the requested static resource directly
	# instead of passin the request off to the backends.

	location ~ ^/(images|resources|assets|system)/.* {
		alias /home/exrevpxy/www/public;
		expires 30d;
		add_header Pragma public;
		add_header Cache-Control "public";

		try_files $uri $uri/ =404;
	}

	# The location / matches everything that has not yet been matched.
	location / {
		proxy_set_header	Host			$host;
		proxy_set_header	X-Real-IP		$remote_addr;
		proxy_set_header	X-Forwarded-For	$proxy_add_x_forwarded_for;

		# For Websocket support
		proxy_http_version 	1.1;
		proxy_set_header	Upgrade		$http_upgrade;
		proxy_set_header	Conection	"upgrade";
		proxy_cache_bypass	$http_upgrade;

		# When buffering is enabled, the entire request body is
		# read from the client before sending the request to a
		# proxied server. When buffering is disabled, the request body
		# is sent to the proxied server immediately as it is received.
		proxy_buffering		off;

		proxy_pass 			http://exbackend;
		proxy_redirect		default;
	}
}
